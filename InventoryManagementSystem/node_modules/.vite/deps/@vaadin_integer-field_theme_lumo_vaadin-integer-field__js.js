import {
  NumberField
} from "./chunk-YJBXTCRQ.js";
import "./chunk-63Z5FNTS.js";
import "./chunk-D3NA2Z6A.js";
import "./chunk-66IEMTXE.js";
import "./chunk-YNOKSINU.js";
import "./chunk-5LII6TDQ.js";
import "./chunk-2EH5YRZ7.js";
import "./chunk-4YBEG6RN.js";
import "./chunk-JBOXDKBA.js";
import "./chunk-BCYL6SED.js";
import "./chunk-3NHR6NN6.js";
import "./chunk-OLSINAS4.js";
import "./chunk-4BLV7JGK.js";
import "./chunk-KWUMTBBL.js";
import "./chunk-V6UY5HX7.js";
import "./chunk-O35XISLU.js";
import "./chunk-5HZ2L2AO.js";
import "./chunk-VWOPMOWK.js";
import "./chunk-MGWBX3WW.js";
import "./chunk-KEGTHN7A.js";
import "./chunk-AS5XC7XD.js";
import "./chunk-V2RZ2VFJ.js";
import "./chunk-KC2LAAN7.js";
import "./chunk-XE7QVGG7.js";
import "./chunk-UOJCIPEF.js";
import "./chunk-PH2YYMKQ.js";
import "./chunk-IZXZMPNU.js";
import "./chunk-BJU74VYK.js";
import "./chunk-WA67K2IQ.js";
import "./chunk-SERZSF4H.js";
import "./chunk-7JVKRSO5.js";
import "./chunk-SEGZ6IIL.js";
import "./chunk-YXNMP5OI.js";
import "./chunk-ENRMTYJ6.js";
import "./chunk-QPK5G54L.js";
import "./chunk-VSZKLYS7.js";
import "./chunk-GGLFYYHX.js";
import "./chunk-RZVR2W7M.js";
import "./chunk-2SCHR2AP.js";
import "./chunk-NS3P3DUU.js";
import "./chunk-CMT2GIH3.js";
import "./chunk-5CB4VU4N.js";
import "./chunk-2DXF6GIY.js";
import "./chunk-BRWGYQM2.js";
import {
  defineCustomElement
} from "./chunk-IJ3VEXPW.js";
import "./chunk-ER2S4LLB.js";
import "./chunk-CG3QMXU5.js";
import "./chunk-FXP5WKMI.js";
import "./chunk-2IE6RYOR.js";
import "./chunk-XB4RSW42.js";
import "./chunk-IIZJCMP5.js";
import "./chunk-GFCZVMCV.js";
import "./chunk-6WL6DBHT.js";
import "./chunk-F3FYYIAV.js";

// node_modules/@vaadin/integer-field/src/vaadin-integer-field.js
var IntegerField = class extends NumberField {
  static get is() {
    return "vaadin-integer-field";
  }
  constructor() {
    super();
    this.allowedCharPattern = "[-+\\d]";
  }
  /**
   * Override an observer from `InputMixin` to clear the value
   * when trying to type invalid characters.
   * @param {string | undefined} newVal
   * @param {string | undefined} oldVal
   * @protected
   * @override
   */
  _valueChanged(newVal, oldVal) {
    if (newVal !== "" && !this.__isInteger(newVal)) {
      console.warn(`Trying to set non-integer value "${newVal}" to <vaadin-integer-field>. Clearing the value.`);
      this.value = "";
      return;
    }
    super._valueChanged(newVal, oldVal);
  }
  /**
   * Override an observer from `NumberField` to reset the step
   * property when an invalid step is set.
   * @param {number} newVal
   * @param {HTMLElement | undefined} inputElement
   * @protected
   * @override
   */
  _stepChanged(step, inputElement) {
    if (step != null && !this.__hasOnlyDigits(step)) {
      console.warn(
        `<vaadin-integer-field> The \`step\` property must be a positive integer but \`${step}\` was provided, so the property was reset to \`null\`.`
      );
      this.step = null;
      return;
    }
    super._stepChanged(step, inputElement);
  }
  /** @private */
  __isInteger(value) {
    return /^(-\d)?\d*$/u.test(String(value));
  }
  /** @private */
  __hasOnlyDigits(value) {
    return /^\d+$/u.test(String(value));
  }
};
defineCustomElement(IntegerField);
/*! Bundled license information:

@vaadin/integer-field/src/vaadin-integer-field.js:
  (**
   * @license
   * Copyright (c) 2021 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/integer-field/theme/lumo/vaadin-integer-field.js:
  (**
   * @license
   * Copyright (c) 2021 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)
*/
//# sourceMappingURL=@vaadin_integer-field_theme_lumo_vaadin-integer-field__js.js.map
