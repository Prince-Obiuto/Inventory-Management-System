import {
  PolylitMixin,
  SideNavChildrenMixin,
  sideNavBaseStyles
} from "./chunk-2BHW2AM2.js";
import "./chunk-ZYNNVHEF.js";
import "./chunk-OTLXGSZG.js";
import "./chunk-5LII6TDQ.js";
import "./chunk-DQHQTP4D.js";
import "./chunk-VWOPMOWK.js";
import "./chunk-KEGTHN7A.js";
import "./chunk-KC2LAAN7.js";
import {
  generateUniqueId
} from "./chunk-XE7QVGG7.js";
import {
  FocusMixin
} from "./chunk-PH2YYMKQ.js";
import "./chunk-UOJCIPEF.js";
import "./chunk-IZXZMPNU.js";
import "./chunk-BJU74VYK.js";
import "./chunk-WA67K2IQ.js";
import {
  ElementMixin
} from "./chunk-7JVKRSO5.js";
import "./chunk-SEGZ6IIL.js";
import "./chunk-ENRMTYJ6.js";
import "./chunk-QPK5G54L.js";
import "./chunk-VSZKLYS7.js";
import "./chunk-GGLFYYHX.js";
import "./chunk-RZVR2W7M.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-2SCHR2AP.js";
import "./chunk-2DXF6GIY.js";
import "./chunk-BRWGYQM2.js";
import {
  defineCustomElement
} from "./chunk-IJ3VEXPW.js";
import "./chunk-ER2S4LLB.js";
import {
  LitElement
} from "./chunk-NS3P3DUU.js";
import {
  css
} from "./chunk-CMT2GIH3.js";
import {
  html
} from "./chunk-5CB4VU4N.js";
import "./chunk-2IE6RYOR.js";
import "./chunk-IIZJCMP5.js";
import "./chunk-6WL6DBHT.js";
import "./chunk-F3FYYIAV.js";

// node_modules/@vaadin/side-nav/theme/lumo/vaadin-side-nav-styles.js
var sideNavStyles = css`
  :host {
    font-family: var(--lumo-font-family);
    font-size: var(--lumo-font-size-m);
    font-weight: 500;
    line-height: var(--lumo-line-height-xs);
    color: var(--lumo-body-text-color);
    -webkit-tap-highlight-color: transparent;
    --_focus-ring-color: var(--vaadin-focus-ring-color, var(--lumo-primary-color-50pct));
    --_focus-ring-width: var(--vaadin-focus-ring-width, 2px);
  }

  [part='label'] {
    display: flex;
    align-items: center;
    width: 100%;
    outline: none;
    box-sizing: border-box;
    border-radius: var(--lumo-border-radius-m);
    font-family: var(--lumo-font-family);
    font-size: var(--lumo-font-size-s);
    font-weight: 500;
    line-height: var(--lumo-line-height-xs);
  }

  [part='label'] ::slotted([slot='label']) {
    color: var(--lumo-secondary-text-color);
    margin: var(--lumo-space-s);
  }

  :host([focus-ring]) [part='label'] {
    box-shadow: 0 0 0 var(--_focus-ring-width) var(--_focus-ring-color);
  }

  [part='toggle-button'] {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: var(--lumo-size-s);
    height: var(--lumo-size-s);
    margin-inline-start: auto;
    margin-inline-end: var(--lumo-space-xs);
    font-size: var(--lumo-icon-size-m);
    line-height: 1;
    color: var(--lumo-contrast-60pct);
    font-family: 'lumo-icons';
    cursor: var(--lumo-clickable-cursor);
  }

  [part='toggle-button']::before {
    content: var(--lumo-icons-angle-right);
    transition: transform 140ms;
  }

  :host(:not([collapsible])) [part='toggle-button'] {
    display: none !important;
  }

  :host(:not([collapsed])) [part='toggle-button']::before {
    transform: rotate(90deg);
  }

  :host([collapsed][dir='rtl']) [part='toggle-button']::before {
    transform: rotate(180deg);
  }

  @media (any-hover: hover) {
    [part='label']:hover [part='toggle-button'] {
      color: var(--lumo-body-text-color);
    }
  }
`;
registerStyles("vaadin-side-nav", sideNavStyles, { moduleId: "lumo-side-nav" });

// node_modules/@vaadin/side-nav/src/vaadin-side-nav.js
var SideNav = class extends SideNavChildrenMixin(FocusMixin(ElementMixin(ThemableMixin(PolylitMixin(LitElement))))) {
  static get is() {
    return "vaadin-side-nav";
  }
  static get shadowRootOptions() {
    return { ...LitElement.shadowRootOptions, delegatesFocus: true };
  }
  static get properties() {
    return {
      /**
       * Whether the side nav is collapsible. When enabled, the toggle icon is shown.
       *
       * @type {boolean}
       */
      collapsible: {
        type: Boolean,
        value: false,
        reflectToAttribute: true
      },
      /**
       * Whether the side nav is collapsed. When collapsed, the items are hidden.
       *
       * @type {boolean}
       */
      collapsed: {
        type: Boolean,
        value: false,
        notify: true,
        reflectToAttribute: true
      }
    };
  }
  static get styles() {
    return sideNavBaseStyles;
  }
  constructor() {
    super();
    this._labelId = `side-nav-label-${generateUniqueId()}`;
  }
  /**
   * Name of the slot to be used for children.
   * @protected
   * @override
   */
  get _itemsSlotName() {
    return "";
  }
  /** @protected */
  get focusElement() {
    return this.shadowRoot.querySelector("button");
  }
  /** @protected */
  firstUpdated() {
    super.firstUpdated();
    if (!this.hasAttribute("role")) {
      this.setAttribute("role", "navigation");
    }
  }
  /** @protected */
  render() {
    return html`
      ${this.collapsible ? html`
            <button
              part="label"
              @click="${this._onLabelClick}"
              aria-expanded="${!this.collapsed}"
              aria-controls="children"
            >
              <slot name="label" @slotchange="${this._onLabelSlotChange}"></slot>
              <span part="toggle-button" aria-hidden="true"></span>
            </button>
          ` : html`
            <div part="label">
              <slot name="label" @slotchange="${this._onLabelSlotChange}"></slot>
            </div>
          `}
      <ul
        id="children"
        role="list"
        part="children"
        ?hidden="${this.collapsed}"
        aria-hidden="${this.collapsed ? "true" : "false"}"
      >
        <slot></slot>
      </ul>
    `;
  }
  /**
   * @param {Event} event
   * @return {boolean}
   * @protected
   * @override
   */
  _shouldSetFocus(event) {
    return event.composedPath()[0] === this.focusElement;
  }
  /** @private */
  _onLabelClick() {
    if (this.collapsible) {
      this.__toggleCollapsed();
    }
  }
  /** @private */
  _onLabelSlotChange() {
    const label = this.querySelector('[slot="label"]');
    if (label) {
      if (!label.id) {
        label.id = this._labelId;
      }
      this.setAttribute("aria-labelledby", label.id);
    } else {
      this.removeAttribute("aria-labelledby");
    }
  }
  /** @private */
  __toggleCollapsed() {
    this.collapsed = !this.collapsed;
  }
};
defineCustomElement(SideNav);
/*! Bundled license information:

@vaadin/side-nav/src/vaadin-side-nav.js:
  (**
   * @license
   * Copyright (c) 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/side-nav/theme/lumo/vaadin-side-nav.js:
  (**
   * @license
   * Copyright (c) 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)
*/
//# sourceMappingURL=@vaadin_side-nav_theme_lumo_vaadin-side-nav__js.js.map
