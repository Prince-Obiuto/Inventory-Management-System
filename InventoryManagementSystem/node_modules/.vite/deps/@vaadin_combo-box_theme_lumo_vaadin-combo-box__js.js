import {
  ComboBoxDataProviderMixin
} from "./chunk-NND2WSOD.js";
import {
  PatternMixin
} from "./chunk-KC3JXHY7.js";
import "./chunk-4QWRGLV4.js";
import {
  ComboBoxItemMixin,
  ComboBoxMixin,
  ComboBoxOverlayMixin,
  ComboBoxScrollerMixin
} from "./chunk-O5KBP2NG.js";
import "./chunk-24TDNNNQ.js";
import "./chunk-2YGOHKLZ.js";
import "./chunk-OTLXGSZG.js";
import "./chunk-6XWQDYZV.js";
import "./chunk-Y6UIPY5B.js";
import "./chunk-6T2CU5D4.js";
import {
  InputControlMixin,
  inputFieldShared as inputFieldShared2
} from "./chunk-G2VMLQOV.js";
import {
  inputFieldShared
} from "./chunk-66IEMTXE.js";
import "./chunk-KNZCLXFP.js";
import "./chunk-5LII6TDQ.js";
import "./chunk-2EH5YRZ7.js";
import "./chunk-BCYL6SED.js";
import "./chunk-3NHR6NN6.js";
import "./chunk-OLSINAS4.js";
import "./chunk-KWUMTBBL.js";
import {
  InputController
} from "./chunk-4YBEG6RN.js";
import {
  LabelledInputController
} from "./chunk-JBOXDKBA.js";
import "./chunk-4BLV7JGK.js";
import "./chunk-V6UY5HX7.js";
import "./chunk-O35XISLU.js";
import "./chunk-5HZ2L2AO.js";
import "./chunk-MGWBX3WW.js";
import "./chunk-5MCTF7AQ.js";
import "./chunk-4O34FFLH.js";
import "./chunk-VWOPMOWK.js";
import "./chunk-KEGTHN7A.js";
import "./chunk-AS5XC7XD.js";
import "./chunk-XPMLNZUE.js";
import "./chunk-LJJO4457.js";
import "./chunk-PU5IKCN6.js";
import {
  OverlayMixin,
  overlayStyles
} from "./chunk-22WHDZKB.js";
import "./chunk-MMP7AZO6.js";
import {
  TooltipController
} from "./chunk-V2RZ2VFJ.js";
import "./chunk-KC2LAAN7.js";
import "./chunk-XE7QVGG7.js";
import "./chunk-PH2YYMKQ.js";
import "./chunk-UOJCIPEF.js";
import "./chunk-IZXZMPNU.js";
import "./chunk-BJU74VYK.js";
import "./chunk-WA67K2IQ.js";
import "./chunk-OR5WJJVF.js";
import "./chunk-FSP2XZVR.js";
import "./chunk-CISLLGPR.js";
import "./chunk-SERZSF4H.js";
import {
  ElementMixin
} from "./chunk-7JVKRSO5.js";
import "./chunk-SEGZ6IIL.js";
import "./chunk-YXNMP5OI.js";
import "./chunk-ENRMTYJ6.js";
import "./chunk-QPK5G54L.js";
import "./chunk-VSZKLYS7.js";
import "./chunk-GGLFYYHX.js";
import "./chunk-RZVR2W7M.js";
import {
  ThemableMixin,
  registerStyles
} from "./chunk-2SCHR2AP.js";
import "./chunk-2DXF6GIY.js";
import {
  DirMixin
} from "./chunk-BRWGYQM2.js";
import {
  defineCustomElement
} from "./chunk-IJ3VEXPW.js";
import "./chunk-ER2S4LLB.js";
import "./chunk-NS3P3DUU.js";
import {
  css
} from "./chunk-CMT2GIH3.js";
import "./chunk-5CB4VU4N.js";
import {
  PolymerElement
} from "./chunk-CG3QMXU5.js";
import "./chunk-FXP5WKMI.js";
import "./chunk-2IE6RYOR.js";
import {
  html
} from "./chunk-XB4RSW42.js";
import "./chunk-IIZJCMP5.js";
import "./chunk-GFCZVMCV.js";
import "./chunk-6WL6DBHT.js";
import "./chunk-F3FYYIAV.js";

// node_modules/@vaadin/combo-box/theme/lumo/vaadin-combo-box-styles.js
var comboBox = css`
  :host {
    outline: none;
  }

  [part='toggle-button']::before {
    content: var(--lumo-icons-dropdown);
  }
`;
registerStyles("vaadin-combo-box", [inputFieldShared, comboBox], { moduleId: "lumo-combo-box" });

// node_modules/@vaadin/combo-box/src/vaadin-combo-box-item.js
var ComboBoxItem = class extends ComboBoxItemMixin(ThemableMixin(DirMixin(PolymerElement))) {
  static get template() {
    return html`
      <style>
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }
      </style>
      <span part="checkmark" aria-hidden="true"></span>
      <div part="content">
        <slot></slot>
      </div>
    `;
  }
  static get is() {
    return "vaadin-combo-box-item";
  }
};
defineCustomElement(ComboBoxItem);

// node_modules/@vaadin/combo-box/src/vaadin-combo-box-overlay.js
var comboBoxOverlayStyles = css`
  #overlay {
    width: var(--vaadin-combo-box-overlay-width, var(--_vaadin-combo-box-overlay-default-width, auto));
  }

  [part='content'] {
    display: flex;
    flex-direction: column;
    height: 100%;
  }
`;
registerStyles("vaadin-combo-box-overlay", [overlayStyles, comboBoxOverlayStyles], {
  moduleId: "vaadin-combo-box-overlay-styles"
});
var ComboBoxOverlay = class extends ComboBoxOverlayMixin(OverlayMixin(DirMixin(ThemableMixin(PolymerElement)))) {
  static get is() {
    return "vaadin-combo-box-overlay";
  }
  static get template() {
    return html`
      <div id="backdrop" part="backdrop" hidden></div>
      <div part="overlay" id="overlay">
        <div part="loader"></div>
        <div part="content" id="content"><slot></slot></div>
      </div>
    `;
  }
};
defineCustomElement(ComboBoxOverlay);

// node_modules/@vaadin/combo-box/src/vaadin-combo-box-scroller.js
var ComboBoxScroller = class extends ComboBoxScrollerMixin(PolymerElement) {
  static get is() {
    return "vaadin-combo-box-scroller";
  }
  static get template() {
    return html`
      <style>
        :host {
          display: block;
          min-height: 1px;
          overflow: auto;

          /* Fixes item background from getting on top of scrollbars on Safari */
          transform: translate3d(0, 0, 0);

          /* Enable momentum scrolling on iOS */
          -webkit-overflow-scrolling: touch;

          /* Fixes scrollbar disappearing when 'Show scroll bars: Always' enabled in Safari */
          box-shadow: 0 0 0 white;
        }

        #selector {
          border-width: var(--_vaadin-combo-box-items-container-border-width);
          border-style: var(--_vaadin-combo-box-items-container-border-style);
          border-color: var(--_vaadin-combo-box-items-container-border-color, transparent);
          position: relative;
        }
      </style>
      <div id="selector">
        <slot></slot>
      </div>
    `;
  }
};
defineCustomElement(ComboBoxScroller);

// node_modules/@vaadin/combo-box/src/vaadin-combo-box.js
registerStyles("vaadin-combo-box", inputFieldShared2, { moduleId: "vaadin-combo-box-styles" });
var ComboBox = class extends ComboBoxDataProviderMixin(
  ComboBoxMixin(PatternMixin(InputControlMixin(ThemableMixin(ElementMixin(PolymerElement)))))
) {
  static get is() {
    return "vaadin-combo-box";
  }
  static get template() {
    return html`
      <style>
        :host([opened]) {
          pointer-events: auto;
        }
      </style>

      <div class="vaadin-combo-box-container">
        <div part="label">
          <slot name="label"></slot>
          <span part="required-indicator" aria-hidden="true" on-click="focus"></span>
        </div>

        <vaadin-input-container
          part="input-field"
          readonly="[[readonly]]"
          disabled="[[disabled]]"
          invalid="[[invalid]]"
          theme$="[[_theme]]"
        >
          <slot name="prefix" slot="prefix"></slot>
          <slot name="input"></slot>
          <div id="clearButton" part="clear-button" slot="suffix" aria-hidden="true"></div>
          <div id="toggleButton" part="toggle-button" slot="suffix" aria-hidden="true"></div>
        </vaadin-input-container>

        <div part="helper-text">
          <slot name="helper"></slot>
        </div>

        <div part="error-message">
          <slot name="error-message"></slot>
        </div>
      </div>

      <vaadin-combo-box-overlay
        id="overlay"
        opened="[[_overlayOpened]]"
        loading$="[[loading]]"
        theme$="[[_theme]]"
        position-target="[[_positionTarget]]"
        no-vertical-overlap
        restore-focus-node="[[inputElement]]"
      ></vaadin-combo-box-overlay>

      <slot name="tooltip"></slot>
    `;
  }
  static get properties() {
    return {
      /**
       * @protected
       */
      _positionTarget: {
        type: Object
      }
    };
  }
  /**
   * Used by `InputControlMixin` as a reference to the clear button element.
   * @protected
   * @return {!HTMLElement}
   */
  get clearElement() {
    return this.$.clearButton;
  }
  /** @protected */
  ready() {
    super.ready();
    this.addController(
      new InputController(this, (input) => {
        this._setInputElement(input);
        this._setFocusElement(input);
        this.stateTarget = input;
        this.ariaTarget = input;
      })
    );
    this.addController(new LabelledInputController(this.inputElement, this._labelController));
    this._tooltipController = new TooltipController(this);
    this.addController(this._tooltipController);
    this._tooltipController.setPosition("top");
    this._tooltipController.setAriaTarget(this.inputElement);
    this._tooltipController.setShouldShow((target) => !target.opened);
    this._positionTarget = this.shadowRoot.querySelector('[part="input-field"]');
    this._toggleElement = this.$.toggleButton;
  }
  /**
   * Override the method from `InputControlMixin`
   * to stop event propagation to prevent `ComboBoxMixin`
   * from handling this click event also on its own.
   *
   * @param {Event} event
   * @protected
   * @override
   */
  _onClearButtonClick(event) {
    event.stopPropagation();
    super._onClearButtonClick(event);
  }
  /**
   * @param {Event} event
   * @protected
   */
  _onHostClick(event) {
    const path = event.composedPath();
    if (path.includes(this._labelNode) || path.includes(this._positionTarget)) {
      super._onHostClick(event);
    }
  }
};
defineCustomElement(ComboBox);
/*! Bundled license information:

@vaadin/combo-box/src/vaadin-combo-box-item.js:
  (**
   * @license
   * Copyright (c) 2015 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/combo-box/src/vaadin-combo-box-overlay.js:
  (**
   * @license
   * Copyright (c) 2015 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/combo-box/src/vaadin-combo-box-scroller.js:
  (**
   * @license
   * Copyright (c) 2015 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)

@vaadin/combo-box/src/vaadin-combo-box.js:
  (**
   * @license
   * Copyright (c) 2015 - 2023 Vaadin Ltd.
   * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
   *)
*/
//# sourceMappingURL=@vaadin_combo-box_theme_lumo_vaadin-combo-box__js.js.map
